
package oodj_assignment;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;


public class DelTask extends javax.swing.JFrame {

    private DefaultTableModel model = new DefaultTableModel();
    private String[] columnName = {"Date","Orderid","Location", "Delivery Fee","Delivery Status","Task Status"};
    private String username;
    
    public DelTask() {
        initComponents();
    }
    
    public DelTask(String username) {
        initComponents();
        this.username = username;
        lblUsername.setText("Welcome to today's task username " + username);
        model.setColumnIdentifiers(columnName);
        displayTodayTask(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bHome = new javax.swing.JButton();
        bTaskHistory = new javax.swing.JButton();
        bDecline = new javax.swing.JButton();
        cbUpdate = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bAccept = new javax.swing.JButton();
        bCurrentTask = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbDeliveryTask = new javax.swing.JTable();
        lblUsername = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        rbOTW = new javax.swing.JRadioButton();
        rbDeliveryComplete = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bHome.setText("Home");
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });

        bTaskHistory.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        bTaskHistory.setText("Check Task History");
        bTaskHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTaskHistoryActionPerformed(evt);
            }
        });

        bDecline.setText("Decline");
        bDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeclineActionPerformed(evt);
            }
        });

        cbUpdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Delivery Complete", "On the Way" }));
        cbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateActionPerformed(evt);
            }
        });

        jLabel2.setText("Update Task:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Task");

        bAccept.setText("Accept");
        bAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAcceptActionPerformed(evt);
            }
        });

        bCurrentTask.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        bCurrentTask.setText("Current Task ");
        bCurrentTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCurrentTaskActionPerformed(evt);
            }
        });

        bUpdate.setText("Update task status");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        tbDeliveryTask.setModel(model);
        jScrollPane2.setViewportView(tbDeliveryTask);

        rbOTW.setText("On the way");

        rbDeliveryComplete.setText("Delivery Complete");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbDeliveryComplete)
                    .addComponent(rbOTW))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbOTW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbDeliveryComplete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bTaskHistory))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                            .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bAccept)
                        .addGap(26, 26, 26)
                        .addComponent(bDecline))
                    .addComponent(bHome))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bUpdate))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(cbUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bCurrentTask)
                                .addGap(100, 100, 100))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(bTaskHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCurrentTask))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bAccept)
                            .addComponent(bDecline)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(bHome))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bUpdate)))))
                .addGap(102, 102, 102))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        dispose(); // Close the current frame
        RunnerHome rh = new RunnerHome(username);
        rh.setVisible(true);
    }//GEN-LAST:event_bHomeActionPerformed

    private void bDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeclineActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tbDeliveryTask.getSelectedRow();
        if (selectedRowIndex >= 0) {
            String orderID = model.getValueAt(selectedRowIndex, 1).toString();
            String runnerID = username; // Get the login runner's username
            // Find the corresponding DeliveryTask with the orderID and runnerID
            DeliveryTaskList deliveryTaskList = new DeliveryTaskList();
            List<DeliveryTask> allDeliveryTasks = deliveryTaskList.getAll();
            // Filter delivery tasks for the logged-in runner
            List<DeliveryTask> runnerTasks = allDeliveryTasks.stream()
                    .filter(task -> task.getRunnerid().equals(runnerID) && task.getOrderid().equals(orderID))
                    .collect(Collectors.toList());
            // Decline the found task(s)
            for (DeliveryTask task : runnerTasks) {
                task.decline(); // Call the decline method of DeliveryTask
            }

            displayTodayTask();
        } else {
            System.out.println("Please select a task to decline.");
        }
    }//GEN-LAST:event_bDeclineActionPerformed

    private void cbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbUpdateActionPerformed

    private void bAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAcceptActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tbDeliveryTask.getSelectedRow();
        if (selectedRowIndex >= 0) {
            String orderid = model.getValueAt(selectedRowIndex, 1).toString();// Get the orderid from the selected row
            DeliveryOrder DO = new DeliveryOrder(orderid);
            DeliveryTask DT = new DeliveryTask(DO);
            DT.setRunnerid(username);// Set the runnerid
            DT.accept();
            Notification noti = new Notification(username, DO.getCustomerid(), new RunnerClass(username).getName() + " has accepted your order");
            noti.send();
            displayTodayTask();
        }
    }//GEN-LAST:event_bAcceptActionPerformed

    private void bCurrentTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCurrentTaskActionPerformed
        // TODO add your handling code here:
        displayTodayTask();
    }//GEN-LAST:event_bCurrentTaskActionPerformed

    private void bTaskHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTaskHistoryActionPerformed
        // TODO add your handling code here:
        //displayAllDeliveryOrders();
        dispose(); // Close the current frame
        DeliveryHistory dh = new DeliveryHistory(username);
        dh.setVisible(true);
    }//GEN-LAST:event_bTaskHistoryActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = tbDeliveryTask.getSelectedRow();
        if (selectedRowIndex >= 0) {
            String orderid = model.getValueAt(selectedRowIndex, 1).toString(); // Get the order ID from the selected row
            DeliveryTask task = new DeliveryTask(orderid, username);

            if (rbOTW.isSelected()) {
                // Update the status to 'On The Way'
                task.setRunnerid(username);
                System.out.println(task.getOrderid());
                System.out.println(task.getDeliOrder().getRunnerid());
                task.update();
            } else if (rbDeliveryComplete.isSelected()) {
                // Update the status to 'Delivery Complete'
                task.setRunnerid(username);
                task.update();
            } else {
                // No radio button selected
                System.out.println("Please select a status to update.");
            }

            displayTodayTask(); // Refresh the table
        } else {
            System.out.println("Please select a task to update.");
        }
    }//GEN-LAST:event_bUpdateActionPerformed

    /*
    private void displayAllDeliveryOrders() {
        // Clear the current table data
        model.setRowCount(0);

        // Get the logged-in runner's username
        String runnerID = username; // Assuming 'username' is the logged-in runner's username

        // Get all delivery tasks from the DeliveryTaskList
        DeliveryTaskList deliveryTaskList = new DeliveryTaskList();
        List<DeliveryTask> allDeliveryTasks = deliveryTaskList.getAll();

        // Filter delivery tasks for the logged-in runner
        List<DeliveryTask> runnerTasks = allDeliveryTasks.stream()
                .filter(task -> task.getRunnerid().equals(runnerID))
                .collect(Collectors.toList());

        // Populate the table with the runner's tasks
        for (DeliveryTask task : runnerTasks) {
            model.addRow(new Object[]{
                    task.getDeliOrder().getDateTime(),
                    task.getOrderid(),
                    //task.getDeliOrder().getOrderType(),
                    //task.getRunnerid(),
                    task.getDeliOrder().getLocation(),
                    task.getDeliOrder().getDeliveryFee(),
                    task.getTaskStatus(),
            });
        }
    }*/
    
    public void displayTodayTask(){
        model.setRowCount(0);
        String runnerID = username; // Get the logged-in runner's username
        // Get all delivery tasks from the DeliveryTaskList
        DeliveryTaskList deliveryTaskList = new DeliveryTaskList();
        List<DeliveryTask> allDeliveryTasks = deliveryTaskList.getAll();
        // Filter delivery tasks for the logged-in runner and today's date
        LocalDate today = LocalDate.now();
        List<DeliveryTask> runnerTasksToday = allDeliveryTasks.stream()
                .filter(task -> task.getRunnerid().equals(runnerID))
                .filter(task -> {
                    LocalDate orderDate = LocalDate.parse(task.getDeliOrder().getDateTime(), DateTimeFormatter.ofPattern("uuuu/MM/dd/HH-mm:ss"));
                    return orderDate.equals(today);
                })
                .collect(Collectors.toList());
        // Populate the table with the runner's tasks for today
        for (DeliveryTask task : runnerTasksToday) {
            model.addRow(new Object[]{
                    task.getDeliOrder().getDateTime(),
                    task.getOrderid(),
                    //task.getDeliOrder().getOrderType(),
                    //task.getRunnerid(),
                    task.getDeliOrder().getLocation(),
                    task.getDeliOrder().getDeliveryFee(),
                    task.getDeliOrder().getRunnerStatus(),
                    task.getTaskStatus()
            });
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAccept;
    private javax.swing.JButton bCurrentTask;
    private javax.swing.JButton bDecline;
    private javax.swing.JButton bHome;
    private javax.swing.JButton bTaskHistory;
    private javax.swing.JButton bUpdate;
    private javax.swing.JComboBox<String> cbUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JRadioButton rbDeliveryComplete;
    private javax.swing.JRadioButton rbOTW;
    private javax.swing.JTable tbDeliveryTask;
    // End of variables declaration//GEN-END:variables
}

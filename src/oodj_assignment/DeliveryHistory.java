/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oodj_assignment;

import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Desiree Tan
 */
public class DeliveryHistory extends javax.swing.JFrame {
    
    private DefaultTableModel model = new DefaultTableModel();
    private String[] columnName = {"Date","Orderid","Location", "Delivery Fee","Delivery Status","TaskStatus"};
    private String username;

    /**
     * Creates new form DeliveryHistory
     */
    public DeliveryHistory() {
        initComponents();
    }
    
    public DeliveryHistory(String username) {
        initComponents();
        this.username = username;
        lblUsername.setText("Welcome to your task history username " + username);
        model.setColumnIdentifiers(columnName);
        displayAllDeliveryOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tbDeliveryTask = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        bHome = new javax.swing.JButton();
        lblUsername = new javax.swing.JLabel();
        bCurrentTask = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbDeliveryTask.setModel(model);
        jScrollPane2.setViewportView(tbDeliveryTask);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Task History");

        bHome.setText("Home");
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });

        bCurrentTask.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        bCurrentTask.setText("Current Task ");
        bCurrentTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCurrentTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bHome)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bCurrentTask)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(bCurrentTask))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bHome)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        dispose(); // Close the current frame
        RunnerHome rh = new RunnerHome(username);
        rh.setVisible(true);
    }//GEN-LAST:event_bHomeActionPerformed

    private void bCurrentTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCurrentTaskActionPerformed
        // TODO add your handling code here:
        dispose();
        DelTask dt = new DelTask(username);
        dt.setVisible(true);
    }//GEN-LAST:event_bCurrentTaskActionPerformed

    
    public void displayAllDeliveryOrders() {
        // Clear the current table data
        model.setRowCount(0);

        // Get the logged-in runner's username
        String runnerID = username; // Assuming 'username' is the logged-in runner's username

        // Get all delivery tasks from the DeliveryTaskList
        DeliveryTaskList deliveryTaskList = new DeliveryTaskList();
        List<DeliveryTask> allDeliveryTasks = deliveryTaskList.getAll();

        // Filter delivery tasks for the logged-in runner
        List<DeliveryTask> runnerTasks = allDeliveryTasks.stream()
                .filter(task -> task.getRunnerid().equals(runnerID))
                .collect(Collectors.toList());

        // Populate the table with the runner's tasks
        for (DeliveryTask task : runnerTasks) {
            model.addRow(new Object[]{
                    task.getDeliOrder().getDateTime(),
                    task.getOrderid(),
                    //task.getDeliOrder().getOrderType(),
                    //task.getRunnerid(),
                    task.getDeliOrder().getLocation(),
                    task.getDeliOrder().getDeliveryFee(),
                    task.getDeliOrder().getRunnerStatus(),
                    task.getTaskStatus()
            });
        }
        /*
    DefaultTableModel model = new DefaultTableModel();
    String[] columnName = {"Date", "Orderid", "Location", "Delivery Fee", "TaskStatus"};
    model.setColumnIdentifiers(columnName);

    String runnerID = username; // Get all historical delivery tasks for the logged-in runner
    
    DeliveryTaskList dtl = new DeliveryTaskList();
    List<DeliveryTask> allDeliveryTasks = dtl.getAll();

    // Filter delivery tasks for the logged-in runner
    List<DeliveryTask> runnerHistoricalTasks = allDeliveryTasks.stream()
            .filter(task -> task.getRunnerid().equals(runnerID))
            .collect(Collectors.toList());

    // Populate the table with the runner's historical tasks
    for (DeliveryTask task : runnerHistoricalTasks) {
        model.addRow(new Object[]{
                task.getDeliOrder().getDateTime(),
                task.getOrderid(),
                task.getDeliOrder().getLocation(),
                task.getDeliOrder().getDeliveryFee(),
                task.getTaskStatus(),
        });
    }

    tbDeliveryTask.setModel(model); // Set the model to the table*/
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCurrentTask;
    private javax.swing.JButton bHome;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tbDeliveryTask;
    // End of variables declaration//GEN-END:variables
}
